
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    /* compileSdkVersion what version of android to compile the app with */
    /* buildToolsVersion component of android sdk required to build the app */
    compileSdkVersion rootProject.sdk_compile_ver
    buildToolsVersion rootProject.build_tools_ver
    compileOptions {
        /* java compiler options
        * incremental whether Java compilation should be incremental or not.
        * sourceCompatibility language level of the java source code.
        * targetCompatibility version of the generated Java bytecode.*/
        /* incremental true */
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        /* additional compilation options
         * jvmTarget Target version of the generated JVM bytecode */
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    defaultConfig {
        /* product flavors configuration is a wise choice,
         * debug { ... }
         * release { ... }
         * reference: https://developer.android.com/studio/build/build-variants
         * applicationId the application id
         * minSdk min sdk for the app
         * targetSdkVersion sdk the app designed to run on
         * maxSdkVersion max sdk for the app
         * versionCode used to determine if one version is higher than another
         * versionName version name shown to users
         * testInstrumentationRunner to use JUnit 4 test classes
         * buildConfigField customized fields accessed during build time
         */
        applicationId "coffee.flavors.unbit"
        minSdkVersion rootProject.sdk_min_ver
        targetSdkVersion rootProject.sdk_target_ver
        maxSdkVersion rootProject.sdk_max_ver
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        /* clear app state between tests */
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    /* flavorDimensions "SOME_STRING" see the documentation when we are ready for this */
    buildTypes {
        /* serve as the debug flavor
         * minifyEnabled removal of unused java code (dependencies)
         * proguardFiles proguard configurations file plugins should use */
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        /* serve as the release flavor
         * crunchPngs will optimize png resources not already compressed
         * minifyEnabled removal of unused java code (dependencies)
         * shrinkResources shrinks unused resources
         * proguardFiles proguard configurations file plugins should use */
        release {
            crunchPngs false
            minifyEnabled false // disable because of dynamic features module
            shrinkResources false  // disable because of dynamic features module
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    androidExtensions {
        /* experimental features for kotlin */
        experimental = true
    }
    /* Data binding helps you write declarative layouts
     * and minimize the glue code necessary to bind your application logic and layouts. */
    dataBinding {
        /* bind the application data to the layouts in a concise way */
        enabled = true
    }
    packagingOptions {
        /* excludes the atomic functions module to prevent warnings */
        /* paths that match exclude patterns will not be included in the apk */
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/main.kotlin_module'
    }
    lintOptions {
        /* lint configuration to customize builds */
        disable 'InvalidPackage'
        abortOnError false
        checkReleaseBuilds false
    }
    testOptions {
        unitTests {
            /* unit test can use android resources, assets, manifest */
            includeAndroidResources = true
            /* allows running a test that calls an API from the Android SDK that you do not mock */
            unitTests.returnDefaultValues = true
            all {
                /* JVM options for heap size during testing */
                minHeapSize = "128m"
                maxHeapSize = "1024m"
            }
        }
    }
}

dependencies {
    /* System libraries for AndroidX */
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Kotlin JDK Support */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /* AndroidX libraries : Compat Support, Ktx Core, Architecture Components, Constraint Layout, DataBinding */
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:' + rootProject.appcompat_ver
    implementation 'androidx.core:core-ktx:' + rootProject.ktx_core_ver
    implementation 'androidx.fragment:fragment-ktx:' + rootProject.fragments_ktx_ver
    implementation 'androidx.annotation:annotation:' + rootProject.annotation_ver
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:' + rootProject.lifecycle_runtime_ktx_ver
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:' + rootProject.lifecycle_livedata_ktx_ver
    implementation 'androidx.constraintlayout:constraintlayout:' + rootProject.constraint_layout_ver
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:' + rootProject.lifecycle_viewmodel_ktx_ver
    implementation 'androidx.lifecycle:lifecycle-common-java8:' + rootProject.lifecycle_common_java8_ver
    implementation 'androidx.lifecycle:lifecycle-reactivestreams-ktx:' + rootProject.lifecycle_reactivestreams_ktx_ver
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:' + rootProject.lifecycle_vm_savedstate_ver
    kapt 'androidx.lifecycle:lifecycle-compiler:' + rootProject.lifecycle_compiler_ver
    kapt 'com.android.databinding:compiler:' + rootProject.databinding_ver

    /* Google libraries : Dagger, Gson */
    implementation 'com.google.dagger:dagger:' + rootProject.google_dagger_ver
    implementation 'com.google.code.gson:gson:' +  rootProject.google_gson_ver
    implementation 'com.google.android.material:material:' + rootProject.google_material_design_ver
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.google_dagger_compiler_ver

    /* Testing libraries: JUnit, Espresso, RoboElectric, Mockito   */
    testImplementation 'androidx.test:core:' + rootProject.test_core_ver
    testImplementation 'androidx.test:runner:' + rootProject.test_runner_ver
    testImplementation 'androidx.test.ext:junit:' + rootProject.test_junit_ver
    testImplementation 'androidx.test:core-ktx:' + rootProject.test_core_ktx_ver
    testImplementation 'androidx.test.ext:junit-ktx:' + rootProject.test_junit_ktx_ver
    testImplementation 'androidx.test.espresso:espresso-core:' + rootProject.test_espresso_core_ver
    testImplementation 'androidx.test.espresso:espresso-intents:' + rootProject.test_espresso_intent_ver
    testImplementation 'androidx.arch.core:core-testing:' + rootProject.test_arch_core_ver
    testImplementation 'org.robolectric:robolectric:' + rootProject.test_robolectric_ver
    testImplementation 'org.mockito:mockito-core:' + rootProject.mockito_core_ver
    testImplementation 'org.mockito:mockito-inline:' + rootProject.mockito_inline_ver
    testImplementation 'androidx.test.ext:truth:' + rootProject.test_truth_ver
    testImplementation 'junit:junit:' + rootProject.junit_ver

    /* Square libraries: LeakCanary */
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
}
